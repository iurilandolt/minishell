https://medium.com/swlh/lets-build-a-linux-shell-part-iii-a472c0102849

https://dev.to/harshbanthiya/writing-my-own-minimal-shell-in-c-part-1-the-constraints-20cg


types of tokens:

redirects:

<< here_doc
< in_file
> out_file
>> out_append

commands:

builtin
	echo
	cd w/ relative or absolute path
	pwd
	export
	unset
	env
	cd

system
	anything in /bin


cmd arguments:

operators:
|

&

&&

||

enviroment variables?
$


int	valid_char(char c)
{
	if (c == '&' || c == '|' ||  c == '>' || c == '<' || c == '$')
		return (1);
	return (0);
}

int	is_space(char c)
{
	if (c == ' ')
		return (1);
	return (0);
}

int	is_backslash(char c)
{
	if (c == '\\')
		return (1);
	return (0);
}

void	set_token_type(t_token *token)
{
	if (!token->value)
		return ;
	else if (ft_strncmp(token->value, ">>", 2) == 0)
		token->type = RED_APP;
	else if (ft_strncmp(token->value, "<<", 2) == 0)
		token->type = HERE_DOC;
	else if (ft_strncmp(token->value, ">", 1) == 0)
		token->type = RED_OUT;
	else if (ft_strncmp(token->value, "<", 1) == 0)
		token->type = RED_IN;
	else if (ft_strncmp(token->value, "|", 1) == 0)
		token->type = PIPE;
	else if (ft_strncmp(token->value, "&", 1) == 0)
		token->type = SAND;
	else
		token->type = STD;
}


typedef enum s_type
{
	RED_IN,
	RED_OUT,
	RED_APP,
	HERE_DOC,
	PIPE,
	SAND,
	STD,
	ARG
}	e_type;

void	tok_refine(t_token *head)
{
	t_token	*tmp;
	int		cmd;

	cmd = 0;
	tmp = head;
	while (tmp)
	{
		brand_token(tmp);
		if (tmp->type == STD && cmd == 0)
			cmd = 1;
		else if (tmp->type == STD && cmd == 1)
			tmp->type = ARG;
		else if (tmp->type != STD)
			cmd = 0;
		printf("token: %s, type: %d\n", tmp->value, tmp->type);
		tmp = tmp->next;
	}

}
